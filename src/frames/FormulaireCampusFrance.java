package frames;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.FileSystemException;
import java.nio.file.Files;
import java.text.DateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import models.CandidatCBRenderer;
import pdf.PDF;

/**
 *
 * @author yvan
 */
public class FormulaireCampusFrance extends javax.swing.JFrame implements ActionListener, CaretListener {

    private File directory;
    private final JFileChooser directoryChooser;
    private JFileChooser readerChooser = null;
    //private final Pattern namePattern = Pattern.compile("([A-Z-]+) (.+)\\_(.+)\\.pdf");
    private final Pattern namePattern = Pattern.compile("(.+)\\.pdf");
    private PDF pdf;
    private Process pdfreader;
    private String reader;
    private final String FILENAMEREADER = "./.reader4cf";
    private final String FILENAMEDIR = "./.lastdirectory4cf";
    private final String FILENAMEINITIALE = "./.initiale4cf";

    /**
     * Creates new form FormulaireCampusFrance
     */
    public FormulaireCampusFrance() throws IOException {
        initComponents();
        setComponentsEnabled(false);

        try (Scanner in = new Scanner(new File(/*directory.getAbsoluteFile() + */FILENAMEDIR))) {
            directory = new File(in.nextLine());
        } catch (FileNotFoundException | NullPointerException fe) {
            directory = new File(".");
        }
        directoryChooser = new JFileChooser(directory);
        directoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        jcbCandidat.setRenderer(new CandidatCBRenderer());
        
        jcbMotif.setSelectedItem(null);

        addListener();

        pdf = new PDF();
    }

    private void setComponentsEnabled(boolean enabled) {
        jcbCandidat.setEnabled(enabled);
        jcbProposeAdmission.setEnabled(enabled);
        jrbL2.setEnabled(enabled);
        jrbL3.setEnabled(enabled);
        jrbM1.setEnabled(enabled);
        jrbM2.setEnabled(enabled);
        jcbSpecialite.setEnabled(enabled);
        jtaObservation.setEnabled(enabled);
        jcbRefus.setEnabled(enabled);
        jcbRefuseAdmission.setEnabled(enabled);
        jcbMotif.setEnabled(enabled);
        jtaMotif.setEnabled(enabled);
        jcbResponsable.setEnabled(enabled);
        jtfDate.setEnabled(enabled);
        jbValider.setEnabled(enabled);
        jtfInitiales.setEnabled(enabled);
        jbValider.setEnabled(enabled);
    }

    private void selectDirectory() {
        if (directoryChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            directory = directoryChooser.getSelectedFile();
            try (PrintWriter out = new PrintWriter(new FileOutputStream(/*directory.getAbsoluteFile() + */FILENAMEDIR))) {
                out.println(directory);
            } catch (FileNotFoundException ex) {
            }
            init();
            initRefuseAdmissionEn();
        } else {
            jcbCandidat.setEnabled(false);
        }
    }

    private void initCandidats() {
        jcbCandidat.removeAllItems();
        jcbCandidat.addItem(null);
        for (File file : directory.listFiles(p -> namePattern.matcher(p.getName()).matches())) {
            jcbCandidat.addItem(file);
        }
        jcbCandidat.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        yearsGroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jcbProposeAdmission = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jcbSpecialite = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaObservation = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jcbRefus = new javax.swing.JCheckBox();
        jcbRefuseAdmission = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaMotif = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jcbResponsable = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jtfDate = new javax.swing.JTextField();
        jrbL2 = new javax.swing.JRadioButton();
        jrbL3 = new javax.swing.JRadioButton();
        jrbM1 = new javax.swing.JRadioButton();
        jrbM2 = new javax.swing.JRadioButton();
        jcbMotif = new javax.swing.JComboBox<>();
        jbDossierCampusFranceLoad = new javax.swing.JButton();
        jcbCandidat = new javax.swing.JComboBox<>();
        jtfInitiales = new javax.swing.JTextField();
        jbValider = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jbAnnuler = new javax.swing.JButton();
        jbLecteurPDF = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Choisir un candidat :");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Avis du responsable de filière "));

        jcbProposeAdmission.setText("Propose l'admission en :");
        jcbProposeAdmission.setName(""); // NOI18N
        jcbProposeAdmission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProposeAdmissionActionPerformed(evt);
            }
        });

        jLabel4.setText("Spécialité :");

        jtaObservation.setColumns(20);
        jtaObservation.setRows(5);
        jScrollPane1.setViewportView(jtaObservation);

        jLabel5.setText("Observations : (éventuellement dispenses accordées) ");

        jcbRefus.setText("Refuse l'admission en :");

        jcbRefuseAdmission.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", " ", " " }));

        jLabel6.setText("Pour le motif suivant :");

        jtaMotif.setColumns(20);
        jtaMotif.setRows(5);
        jScrollPane2.setViewportView(jtaMotif);

        jLabel7.setText("Responsable de filière");

        jcbResponsable.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Stéphane Rivière", "Bruno Adam", "Mahmoud Melkemi" }));

        jLabel8.setText("Date et signature :");

        jtfDate.setText("jj/mm/aaaa");
        jtfDate.setText(DateFormat.getDateInstance().format(new Date()));
        jtfDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDateActionPerformed(evt);
            }
        });

        yearsGroup.add(jrbL2);
        jrbL2.setText("L2");

        yearsGroup.add(jrbL3);
        jrbL3.setText("L3");

        yearsGroup.add(jrbM1);
        jrbM1.setText("M1");

        yearsGroup.add(jrbM2);
        jrbM2.setText("M2");

        jcbMotif.setEditable(true);
        jcbMotif.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Le dossier ne présente pas les compétences requises" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 138, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbMotif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
                        .addComponent(jcbProposeAdmission, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jrbL2)
                                    .addComponent(jrbL3))
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jcbSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jrbM2)
                                        .addComponent(jrbM1)))))
                        .addComponent(jcbResponsable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jcbRefus)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jcbRefuseAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcbProposeAdmission)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbL2)
                    .addComponent(jrbM1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbL3)
                    .addComponent(jrbM2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jcbSpecialite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbRefus)
                    .addComponent(jcbRefuseAdmission, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jcbMotif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbResponsable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbDossierCampusFranceLoad.setText("Choisir un répertoire contenant des dossiers Campus France");
        jbDossierCampusFranceLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDossierCampusFranceLoadActionPerformed(evt);
            }
        });

        jcbCandidat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCandidatActionPerformed(evt);
            }
        });

        jbValider.setText("Valider");

        jLabel1.setText("Tes initiales :");

        jbAnnuler.setText("Annuler");

        jbLecteurPDF.setText("Lecteur PDF : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbCandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfInitiales, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbLecteurPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAnnuler)
                        .addGap(18, 18, 18)
                        .addComponent(jbValider)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jbDossierCampusFranceLoad)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jbDossierCampusFranceLoad)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbCandidat, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbValider)
                    .addComponent(jtfInitiales)
                    .addComponent(jLabel1)
                    .addComponent(jbAnnuler)
                    .addComponent(jbLecteurPDF))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbProposeAdmissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProposeAdmissionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbProposeAdmissionActionPerformed

    private void jtfDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfDateActionPerformed

    private void jbDossierCampusFranceLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDossierCampusFranceLoadActionPerformed
        // TODO add your handling code here:
        selectDirectory();
    }//GEN-LAST:event_jbDossierCampusFranceLoadActionPerformed

    private void jcbCandidatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCandidatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbCandidatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormulaireCampusFrance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new FormulaireCampusFrance().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(FormulaireCampusFrance.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAnnuler;
    private javax.swing.JButton jbDossierCampusFranceLoad;
    private javax.swing.JButton jbLecteurPDF;
    private javax.swing.JButton jbValider;
    private javax.swing.JComboBox<File> jcbCandidat;
    private javax.swing.JComboBox<String> jcbMotif;
    private javax.swing.JCheckBox jcbProposeAdmission;
    private javax.swing.JCheckBox jcbRefus;
    private javax.swing.JComboBox<String> jcbRefuseAdmission;
    private javax.swing.JComboBox<String> jcbResponsable;
    private javax.swing.JComboBox<String> jcbSpecialite;
    private javax.swing.JRadioButton jrbL2;
    private javax.swing.JRadioButton jrbL3;
    private javax.swing.JRadioButton jrbM1;
    private javax.swing.JRadioButton jrbM2;
    private javax.swing.JTextArea jtaMotif;
    private javax.swing.JTextArea jtaObservation;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfInitiales;
    private javax.swing.ButtonGroup yearsGroup;
    // End of variables declaration//GEN-END:variables

    private void addListener() {
        jcbProposeAdmission.addActionListener(this);
        jcbCandidat.addActionListener(this);
        jrbL2.addActionListener(this);
        jrbL3.addActionListener(this);
        jrbM1.addActionListener(this);
        jrbM2.addActionListener(this);
        jcbRefus.addActionListener(this);
        jtfInitiales.addCaretListener(this);
        jbValider.addActionListener(this);
        jbAnnuler.addActionListener(this);
        jcbRefuseAdmission.addActionListener(this);
        jcbSpecialite.addActionListener(this);
        jbLecteurPDF.addActionListener(this);
        jcbRefuseAdmission.addActionListener(this);
        jcbResponsable.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (jcbCandidat == e.getSource()) {
            File select = (File) jcbCandidat.getSelectedItem();
            if (select != null) {
                jcbCandidat.setEnabled(false);
                jbDossierCampusFranceLoad.setEnabled(false);
                jcbProposeAdmission.setEnabled(true);
                jcbRefus.setEnabled(true);
                jcbResponsable.setEnabled(true);
                jtfInitiales.setEnabled(true);

                try (Scanner in = new Scanner(new File(/*directory.getAbsoluteFile() + */FILENAMEREADER))) {
                    reader = in.nextLine();
                } catch (FileNotFoundException fe) {
                    reader = null;
                }
                if (reader == null || reader.trim().isEmpty()) {
                    chooserReader();
                } else {
                    jbLecteurPDF.setText("Lecteur PDF : " + reader);
                }
                try {
                    pdfreader = Runtime.getRuntime().exec(new String[]{reader, select.getAbsolutePath()});
                } catch (IOException ex) {
                    chooserReader();
                }
            }
            jtfInitiales.setEnabled(true);

        } else if (jcbProposeAdmission == e.getSource()) {
            if (jcbProposeAdmission.isSelected()) {
                jrbL2.setEnabled(true);
                jrbL3.setEnabled(true);
                jrbM1.setEnabled(true);
                jrbM2.setEnabled(true);
                jtaObservation.setEnabled(true);
            } else {
                jrbL2.setEnabled(false);
                jrbL3.setEnabled(false);
                jrbM1.setEnabled(false);
                jrbM2.setEnabled(false);
                yearsGroup.clearSelection();
                jrbL2.setSelected(false);
                jrbL3.setSelected(false);
                jrbM1.setSelected(false);
                jrbM2.setSelected(false);
                jtaObservation.setEnabled(false);
                initSpecialite();
                initRefuseAdmissionEn();
            }

            fillResponsable();
        } else if (e.getSource() == jrbL2
                || e.getSource() == jrbL3
                || e.getSource() == jrbM1
                || e.getSource() == jrbM2) {
            initSpecialite();
            fillResponsable();
        } else if (jcbRefus == e.getSource()) {
            if (jcbRefus.isSelected()) {
                jcbRefuseAdmission.setEnabled(true);
                jcbMotif.setEnabled(true);
                //jtfMotif.setText("Le dossier ne présente pas les compétences requises");
                jcbMotif.setSelectedItem(null);
                jtaMotif.setEnabled(true);
            } else {
                jcbRefuseAdmission.setEnabled(false);
                jcbRefuseAdmission.setSelectedItem(null);
                jcbMotif.setSelectedItem(null);
                jcbMotif.setEnabled(false);
                jtaMotif.setEnabled(false);
            }

        } else if (jcbRefuseAdmission == e.getSource()) {
            fillResponsable();
        } else if (jbValider == e.getSource()) {
            try {
                validation();
                if (pdfreader != null) {
                    pdfreader.destroy();
                }
            } catch (IOException ex) {
            }
        } else if (jbAnnuler == e.getSource()) {

            File initiales = new File(/*directory.getAbsoluteFile() + */FILENAMEINITIALE);
            try (PrintWriter out = new PrintWriter(initiales)) {
                out.println(jtfInitiales.getText());
            } catch (FileNotFoundException ex) {

            }
            if (pdfreader != null) {
                pdfreader.destroy();
            }
            init();
            fillResponsable();
        } else if (jbLecteurPDF == e.getSource()) {
            chooserReader();
        } else if (jcbResponsable == e.getSource()) {
            //System.out.println(jcbResponsable.getSelectedItem());
        } else if (jcbSpecialite == e.getSource()) {
            fillResponsable();
        }
        initForValidation();
    }

    private void initSpecialite() {
        String selected = (String) jcbSpecialite.getSelectedItem();
        jcbSpecialite.removeAllItems();
        if (jrbL2.isSelected()) {
            jcbSpecialite.addItem("L2 INFO");
        }
        if (jrbL3.isSelected()) {
            jcbSpecialite.addItem("L3 MIAGE");
            jcbSpecialite.addItem("L3 INFO");
            jcbSpecialite.addItem("L3 MIAGE ou L3 INFO");
        }
        if (jrbM1.isSelected()) {
            jcbSpecialite.addItem("M1 MIAGE");
            jcbSpecialite.addItem("M1 INFO");
            jcbSpecialite.addItem("M1 MIAGE ou M1 INFO");
        }
        if (jrbM2.isSelected()) {
            jcbSpecialite.addItem("M2 MIAGE");
            jcbSpecialite.addItem("M2 INFO");
        }

        jcbSpecialite.setEnabled(jcbSpecialite.getItemCount() != 0);

        if (jcbSpecialite.getItemCount() == 1) {
            jcbSpecialite.setSelectedIndex(0);

        } else {

            for (int i = 0; i < jcbSpecialite.getItemCount(); ++i) {
                if (jcbSpecialite.getItemAt(i).equals(selected)) {
                    jcbSpecialite.setSelectedIndex(i);
                    return;
                }
            }
            jcbSpecialite.setSelectedItem(null);
        }
    }

    private void initForValidation() {
        if ((((jrbL2.isSelected()
                || jrbL3.isSelected()
                || jrbM1.isSelected()
                || jrbM2.isSelected())
                && jcbSpecialite.getSelectedItem() != null)
                || (jcbRefus.isSelected() && jcbRefuseAdmission.getSelectedItem() != null))
                && jtfInitiales.getText().trim().length() > 1
                && jcbResponsable.getSelectedItem() != null) {
            jbValider.setEnabled(true);
        } else {
            jbValider.setEnabled(false);
        }
    }

    @Override
    public void caretUpdate(CaretEvent e) {
        initForValidation();
    }

    private void validation() throws IOException {
        pdf.setL2Checked(jrbL2.isSelected());
        pdf.setL3Checked(jrbL3.isSelected());
        pdf.setM1Checked(jrbM1.isSelected());
        pdf.setM2Checked(jrbM2.isSelected());
        pdf.setPropositionChecked(jcbProposeAdmission.isSelected());
        pdf.setRefusChecked(jcbRefus.isSelected());
        pdf.setComplementRefus(jtaMotif.getText());
        pdf.setFormationRefuse(jcbRefuseAdmission.getSelectedItem() == null ? "" : jcbRefuseAdmission.getSelectedItem().toString());
        pdf.setObservations(jtaObservation.getText());
        pdf.setResponsable(jcbResponsable.getSelectedItem().toString());
        pdf.setSpecialite(jcbSpecialite.getSelectedItem() == null ? "" : jcbSpecialite.getSelectedItem().toString());
        pdf.setNomPrenomId(((File) jcbCandidat.getSelectedItem()).getName().replace(".pdf", "").replace("_", " "));
        pdf.setMotif(jcbMotif.getSelectedItem() == null ? "" : jcbMotif.getSelectedItem().toString());
        save();
    }

    private void save() throws IOException {
        File initiales = new File(/*directory.getAbsoluteFile() + */FILENAMEINITIALE);
        try (PrintWriter out = new PrintWriter(initiales)) {
            out.println(jtfInitiales.getText());
        }
        String specialite = (String) jcbSpecialite.getSelectedItem();
        if (specialite != null) {
            File file = new File(directory.getCanonicalPath() + "/" + specialite);
            file.mkdir();
            file = new File(directory.getCanonicalPath() + "/" + specialite + "/aenvoyera " + jcbResponsable.getSelectedItem());
            file.mkdir();
            pdf.save(file.getCanonicalPath() + "/" + "FormulaireCF2017 " + ((File) jcbCandidat.getSelectedItem()).getName().replace(".pdf", "") + " Admis " + specialite + " " + jtfInitiales.getText() + ".pdf");
            file = new File(directory.getCanonicalPath() + "/" + specialite + "/dossier");
            file.mkdir();
            File from = new File(directory.getCanonicalPath() + "/" + ((File) jcbCandidat.getSelectedItem()).getName());
            File to = new File(file.getCanonicalPath() + "/" + ((File) jcbCandidat.getSelectedItem()).getName().replace(".pdf", "") + " Admis " + specialite + " " + jtfInitiales.getText() + ".pdf");
            if (pdfreader != null) {
                pdfreader.destroy();
            }

            boolean again = true;
            int n = 0;
            while (again) {
                try {
                    Files.move(from.toPath(), to.toPath());
                    again = false;
                } catch (FileSystemException fse) {
                    ++n;
                    if (n > 9) {
                        JOptionPane.showMessageDialog(null, "Peut-être est-il utilisé par un autre processus\n" + fse.getMessage(), "Impossible de déplacer le fichier PDF", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    ++n;
                    if (n > 9) {
                        JOptionPane.showMessageDialog(null, "Peut-être est-il utilisé par un autre processus\n", "Impossible de déplacer le fichier PDF", JOptionPane.ERROR_MESSAGE);
                    }
                }
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                }
            }
            init();
        } else {
            specialite = (String) jcbRefuseAdmission.getSelectedItem();
            File file = new File(directory.getCanonicalPath() + "/Refus");
            file.mkdir();
            file = new File(directory.getCanonicalPath() + "/Refus/aenvoyera Patricia");
            file.mkdir();
            pdf.save(file.getCanonicalPath() + "/" + "FormulaireCF2017 " + ((File) jcbCandidat.getSelectedItem()).getName().replace(".pdf", "") + " Refus " + specialite + " " + jtfInitiales.getText() + ".pdf");
            file = new File(directory.getCanonicalPath() + "/Refus/dossier");
            file.mkdir();
            File from = new File(directory.getCanonicalPath() + "/" + ((File) jcbCandidat.getSelectedItem()).getName());
            File to = new File(file.getCanonicalPath() + "/" + ((File) jcbCandidat.getSelectedItem()).getName().replace(".pdf", "") + " Refus " + specialite + " " + jtfInitiales.getText() + ".pdf");

            if (pdfreader != null) {
                pdfreader.destroy();
            }
            boolean again = true;
            int n = 0;
            while (again) {
                try {
                    Files.move(from.toPath(), to.toPath());
                    again = false;
                } catch (FileSystemException fse) {
                    ++n;
                    if (n > 9) {
                        JOptionPane.showMessageDialog(null, "Peut-être est-il utilisé par un autre processus\n" + fse.getMessage(), "Impossible de déplacer le fichier PDF", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    ++n;
                    if (n > 9) {
                        JOptionPane.showMessageDialog(null, "Peut-être est-il utilisé par un autre processus\n", "Impossible de déplacer le fichier PDF", JOptionPane.ERROR_MESSAGE);
                    }
                }
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                }
            }
            init();
        }
    }

    private void init() {
        try {
            pdf = new PDF();
            jrbL2.setEnabled(false);
            jrbL3.setEnabled(false);
            jrbM1.setEnabled(false);
            jrbM2.setEnabled(false);
            jrbL2.setSelected(false);
            jrbL3.setSelected(false);
            jrbM1.setSelected(false);
            jrbM2.setSelected(false);
            jtaObservation.setEnabled(false);
            jtaObservation.setText("");
            jtaMotif.setEnabled(false);
            jtaMotif.setText("");
            jcbProposeAdmission.setEnabled(false);
            jcbProposeAdmission.setSelected(false);
            jcbRefus.setEnabled(false);
            jcbRefus.setSelected(false);
            jcbRefuseAdmission.setEnabled(false);
            jcbRefuseAdmission.setSelectedItem(null);
            jcbResponsable.setEnabled(false);
            jcbResponsable.setSelectedItem(null);
            jcbSpecialite.setEnabled(false);
            yearsGroup.clearSelection();

            File initiales = new File(/*directory.getAbsoluteFile() + */FILENAMEINITIALE);
            try (Scanner in = new Scanner(initiales)) {
                jtfInitiales.setText(in.hasNext() ? in.next() : "");
            } catch (NullPointerException | FileNotFoundException n) {
                jtfInitiales.setText("?");
            }

            initCandidats();
            initSpecialite();
            initRefuseAdmissionEn();
            pack();
        } catch (IOException ex) {
        }
    }

    private void initRefuseAdmissionEn() {
        jcbRefuseAdmission.removeAllItems();
        jcbRefuseAdmission.addItem("L2 INFO");
        jcbRefuseAdmission.addItem("L3 MIAGE");
        jcbRefuseAdmission.addItem("L3 INFO");
        jcbRefuseAdmission.addItem("L3 MIAGE et L3 INFO");
        jcbRefuseAdmission.addItem("M1 MIAGE");
        jcbRefuseAdmission.addItem("M1 INFO");
        jcbRefuseAdmission.addItem("M1 MIAGE et M1 INFO");
        jcbRefuseAdmission.addItem("M2 MIAGE");
        jcbRefuseAdmission.addItem("M2 INFO");
        jcbRefuseAdmission.addItem("M2 MIAGE et M2 INFO");
        jcbRefuseAdmission.setSelectedItem(null);
    }

    private void fillResponsable() {
        jcbResponsable.removeAllItems();
        String specialite = (String) jcbSpecialite.getSelectedItem();
        if (specialite != null) {
            switch (specialite) {
                case "L2 INFO":
                case "L3 INFO":
                    jcbResponsable.addItem("Stéphane Rivière");
                    break;
                case "L3 MIAGE":
                case "M1 MIAGE":
                case "M2 MIAGE":
                    jcbResponsable.addItem("Bruno Adam");
                    break;
                case "L3 MIAGE ou L3 INFO":
                case "M1 MIAGE ou M1 INFO":
                    jcbResponsable.addItem("Bruno Adam");
                    jcbResponsable.addItem("Mahmoud Melkemi");
                    break;
                default:
                    jcbResponsable.addItem("Mahmoud Melkemi");
                    break;
            }
        } else {
            String refusedIn = (String) jcbRefuseAdmission.getSelectedItem();
            if (refusedIn != null) {
                switch (refusedIn) {
                    case "L2 INFO":
                    case "L3 INFO":
                        jcbResponsable.addItem("Stéphane Rivière");
                        break;
                    case "M1 INFO":
                    case "M2 INFO":
                        jcbResponsable.addItem("Mahmoud Melkemi");
                        break;
                    case "L3 MIAGE":
                    case "M1 MIAGE":
                    case "M2 MIAGE":
                        jcbResponsable.addItem("Bruno Adam");
                        break;
                    default:
                        jcbResponsable.addItem("Bruno Adam");
                        jcbResponsable.addItem("Mahmoud Melkemi");
                        break;
                }
            }
        }
        if (jcbResponsable.getItemCount() == 1) {
            jcbResponsable.setSelectedIndex(0);
        } else {
            jcbResponsable.setSelectedIndex(-1);
        }
    }

    private void chooserReader() {

        readerChooser = new JFileChooser();
        readerChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        while (readerChooser.showDialog(null, "Choisir son lecteur pdf préféré") != JFileChooser.APPROVE_OPTION) {

        }
        reader = readerChooser.getSelectedFile().getAbsolutePath();
        try (PrintWriter out = new PrintWriter(new FileOutputStream(/*directory.getAbsoluteFile() + */FILENAMEREADER))) {
            out.println(reader);
            jbLecteurPDF.setText("Lecteur PDF " + reader);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormulaireCampusFrance.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
